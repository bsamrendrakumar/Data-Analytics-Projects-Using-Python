#[1]
'''For the task of Metro Operations Optimization, we will aim to identify the key areas 
where adjustments in train frequencies could significantly improve the service levels, 
reduce wait times, and alleviate overcrowding.'''

import pandas as pd

# load all the data files
agency = pd.read_csv('agency.txt')
calendar = pd.read_csv('calendar.txt')
routes = pd.read_csv('routes.txt')
shapes = pd.read_csv('shapes.txt')
stop_times = pd.read_csv('stop_times.txt')
stops = pd.read_csv('stops.txt')
trips = pd.read_csv('trips.txt')

# show the first few rows and the structure of each dataframe
data_overviews = {
    "agency": agency.head(),
    "calendar": calendar.head(),
    "routes": routes.head(),
    "shapes": shapes.head(),
    "stop_times": stop_times.head(),
    "stops": stops.head(),
    "trips": trips.head()
}

data_overviews

#[2]
'''I’ll start by plotting the geographical paths of different routes on a 
map to visualize how the Delhi Metro covers the area:'''

plt.title('Geographical Paths of Delhi Metro Routes')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()
1
import matplotlib.pyplot as plt
2
import seaborn as sns
3
​
4
plt.figure(figsize=(10, 8))
5
sns.scatterplot(x='shape_pt_lon', y='shape_pt_lat', hue='shape_id', data=shapes, palette='viridis', s=10, legend=None)
6
plt.title('Geographical Paths of Delhi Metro Routes')
7
plt.xlabel('Longitude')
8
plt.ylabel('Latitude')
9
plt.grid(True)
10
plt.show()

#[3]
'''The map visualization shows the geographical paths of the Delhi Metro routes.
Each line (identified by a unique colour) represents the path of a different route defined in
the shapes dataset. This visual helps to understand how the Metro covers the geographical area of
Delhi, demonstrating the connectivity and spread of the network.

Next, I will examine the frequency and scheduling of trips across different days of the 
week by analyzing the calendar and trip data:'''

1
# merge trips with calendar to include the day of operation information
2
trips_calendar = pd.merge(trips, calendar, on='service_id', how='left')
3
​
4
# count the number of trips per day of the week
5
trip_counts = trips_calendar[['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']].sum()
6
​
7
# Plotting
8
plt.figure(figsize=(10, 6))
9
trip_counts.plot(kind='bar', color='skyblue')
10
plt.title('Number of Trips per Day of the Week')
11
plt.xlabel('Day of the Week')
12
plt.ylabel('Number of Trips')
13
plt.xticks(rotation=45)
14
plt.grid(True)
15
plt.show()

#[4]
'''This finding suggests that the Delhi Metro strategically scales 
its operations based on the expected daily ridership, which likely peaks 
during weekdays due to work and school commutes.

To further analyze the connectivity and effectiveness of the route strategy, 
I will analyze the distribution and connectivity of stops:'''

1
# plotting the locations of the stops
2
plt.figure(figsize=(10, 10))
3
sns.scatterplot(x='stop_lon', y='stop_lat', data=stops, color='red', s=50, marker='o')
4
plt.title('Geographical Distribution of Delhi Metro Stops')
5
plt.xlabel('Longitude')
6
plt.ylabel('Latitude')
7
plt.grid(True)
8
plt.show()

#[5]
'''This finding suggests that the Delhi Metro strategically scales 
its operations based on the expected daily ridership, which likely peaks 
during weekdays due to work and school commutes.

To further analyze the connectivity and effectiveness of the route strategy, 
I will analyze the distribution and connectivity of stops:'''

1
# plotting the locations of the stops
2
plt.figure(figsize=(10, 10))
3
sns.scatterplot(x='stop_lon', y='stop_lat', data=stops, color='red', s=50, marker='o')
4
plt.title('Geographical Distribution of Delhi Metro Stops')
5
plt.xlabel('Longitude')
6
plt.ylabel('Latitude')
7
plt.grid(True)
8
plt.show()

#[6]
'''Next, let’s analyze the service frequency by examining the timing intervals 
between trips during different parts of the day. It will help us understand peak
and off-peak operational strategies, which are crucial for managing commuter flow 
efficiently. Let’s calculate and visualize these intervals:'''

1
# converting stop_times 'arrival_time' from string to datetime.time for easier manipulation
2
import datetime as dt
3
​
4
# function to convert time string to datetime.time
5
def convert_to_time(time_str):
6
    try:
7
        return dt.datetime.strptime(time_str, '%H:%M:%S').time()
8
    except ValueError:
9
        # Handle cases where the hour might be greater than 23 (e.g., 24:00:00 or 25:00:00)
10
        hour, minute, second = map(int, time_str.split(':'))
11
        return dt.time(hour % 24, minute, second)
12
​
13
stop_times['arrival_time_dt'] = stop_times['arrival_time'].apply(convert_to_time)
14
​
15
# calculate the difference in arrival times for subsequent trips at each stop
16
stop_times_sorted = stop_times.sort_values(by=['stop_id', 'arrival_time_dt'])
17
stop_times_sorted['next_arrival_time'] = stop_times_sorted.groupby('stop_id')['arrival_time_dt'].shift(-1)
18
​
19
# function to calculate the difference in minutes between two times
20
def time_difference(time1, time2):
21
    if pd.isna(time1) or pd.isna(time2):
22
        return None
23
    full_date_time1 = dt.datetime.combine(dt.date.today(), time1)
24
    full_date_time2 = dt.datetime.combine(dt.date.today(), time2)
25
    return (full_date_time2 - full_date_time1).seconds / 60
26
​
27
stop_times_sorted['interval_minutes'] = stop_times_sorted.apply(lambda row: time_difference(row['arrival_time_dt'], row['next_arrival_time']), axis=1)
28
​
29
# drop NaN values from intervals (last trip of the day)
30
stop_times_intervals = stop_times_sorted.dropna(subset=['interval_minutes'])
31
​
32
# average intervals by time of day (morning, afternoon, evening)
33
def part_of_day(time):
34
    if time < dt.time(12, 0):
35
        return 'Morning'
36
    elif time < dt.time(17, 0):
37
        return 'Afternoon'
38
    else:
39
        return 'Evening'
40
​
41
stop_times_intervals['part_of_day'] = stop_times_intervals['arrival_time_dt'].apply(part_of_day)
42
average_intervals = stop_times_intervals.groupby('part_of_day')['interval_minutes'].mean().reset_index()
43
​
44
plt.figure(figsize=(8, 6))
45
sns.barplot(x='part_of_day', y='interval_minutes', data=average_intervals, order=['Morning', 'Afternoon', 'Evening'], palette='mako')
46
plt.title('Average Interval Between Trips by Part of Day')
47
plt.xlabel('Part of Day')
48
plt.ylabel('Average Interval (minutes)')
49
plt.grid(True)
50
plt.show()

#[7]
'''Now, let’s calculate the number of trips and the available capacity per time interval. 
It will give us a basic understanding of how service levels vary throughout the day. We’ll classify the intervals as:'''

Early Morning: Before 6 AM
Morning Peak: 6 AM to 10 AM
Midday: 10 AM to 4 PM
Evening Peak: 4 PM to 8 PM
Late Evening: After 8 PM
Let’s calculate the supply in terms of trips during these time intervals using the stop_times data:

1
# define time intervals for classification
2
def classify_time_interval(time):
3
    if time < dt.time(6, 0):
4
        return 'Early Morning'
5
    elif time < dt.time(10, 0):
6
        return 'Morning Peak'
7
    elif time < dt.time(16, 0):
8
        return 'Midday'
9
    elif time < dt.time(20, 0):
10
        return 'Evening Peak'
11
    else:
12
        return 'Late Evening'
13
​
14
# apply time interval classification
15
stop_times['time_interval'] = stop_times['arrival_time_dt'].apply(classify_time_interval)
16
​
17
# count the number of trips per time interval
18
trips_per_interval = stop_times.groupby('time_interval')['trip_id'].nunique().reset_index()
19
trips_per_interval = trips_per_interval.rename(columns={'trip_id': 'number_of_trips'})
20
​
21
# sorting the dataframe
22
ordered_intervals = ['Early Morning', 'Morning Peak', 'Midday', 'Evening Peak', 'Late Evening']
23
trips_per_interval['time_interval'] = pd.Categorical(trips_per_interval['time_interval'], categories=ordered_intervals, ordered=True)
24
trips_per_interval = trips_per_interval.sort_values('time_interval')
25
​
26
# plotting the number of trips per time interval
27
plt.figure(figsize=(10, 6))
28
sns.barplot(x='time_interval', y='number_of_trips', data=trips_per_interval, palette='Set2')
29
plt.title('Number of Trips per Time Interval')
30
plt.xlabel('Time Interval')
31
plt.ylabel('Number of Trips')
32
plt.grid(True)
33
plt.show()

#[8]
'''Let’s start with refining the frequencies of trains during peak and off-peak hours 
based on the trip frequency analysis we performed earlier. I’ll create a hypothetical 
scenario where we adjust the frequencies during these times based on assumed passenger 
loads. An assumption here is that morning and evening peaks need a 20% increase in service, 
while midday and late evening might handle a 10% reduction without impacting passenger service negatively'''

Let’s calculate and visualize these adjustments:

1
# adjusting frequencies based on hypothetical scenario
2
adjusted_trips_per_interval = trips_per_interval.copy()
3
adjustment_factors = {'Morning Peak': 1.20, 'Evening Peak': 1.20, 'Midday': 0.90, 'Early Morning': 1.0, 'Late Evening': 0.90}
4
​
5
# apply the adjustments
6
adjusted_trips_per_interval['adjusted_number_of_trips'] = adjusted_trips_per_interval.apply(
7
    lambda row: int(row['number_of_trips'] * adjustment_factors[row['time_interval']]), axis=1)
8
​
9
# plotting original vs adjusted number of trips per time interval
10
plt.figure(figsize=(12, 6))
11
bar_width = 0.35
12
r1 = range(len(adjusted_trips_per_interval))
13
r2 = [x + bar_width for x in r1]
14
​
15
plt.bar(r1, adjusted_trips_per_interval['number_of_trips'], color='blue', width=bar_width, edgecolor='grey', label='Original')
16
plt.bar(r2, adjusted_trips_per_interval['adjusted_number_of_trips'], color='cyan', width=bar_width, edgecolor='grey', label='Adjusted')
17
​
18
plt.xlabel('Time Interval', fontweight='bold')
19
plt.ylabel('Number of Trips', fontweight='bold')
20
plt.xticks([r + bar_width/2 for r in range(len(adjusted_trips_per_interval))], adjusted_trips_per_interval['time_interval'])
21
plt.title('Original vs Adjusted Number of Trips per Time Interval')
22
plt.legend()
23
​
24
plt.show()
